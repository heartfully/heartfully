require 'rails_helper'
include SessionsHelper

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe RegistriesController, :type => :controller do

  # TODO: Make all commented out pending tests pass

  # # This should return the minimal set of attributes required to create a valid
  # # Registry. As you add validations to Registry, be sure to
  # # adjust the attributes here as well.
  # let(:valid_attributes) {
  #   skip("Add a hash of attributes valid for your model")
  # }

  # let(:invalid_attributes) {
  #   skip("Add a hash of attributes invalid for your model")
  # }

  # # This should return the minimal set of values that should be in the session
  # # in order to pass any filters (e.g. authentication) defined in
  # # RegistriesController. Be sure to keep this updated too.
  # let(:valid_session) { {} }

  # describe "GET index" do
  #   it "assigns all registries as @registries" do
  #     registry = Registry.create! valid_attributes
  #     get :index, {}, valid_session
  #     expect(assigns(:registries)).to eq([registry])
  #   end
  # end

  # describe "GET show" do
  #   it "assigns the requested registry as @registry" do
  #     registry = Registry.create! valid_attributes
  #     get :show, {:id => registry.to_param}, valid_session
  #     expect(assigns(:registry)).to eq(registry)
  #   end
  # end

  # describe "GET new" do
  #   it "assigns a new registry as @registry" do
  #     get :new, {}, valid_session
  #     expect(assigns(:registry)).to be_a_new(Registry)
  #   end
  # end

  # describe "GET edit" do
  #   it "assigns the requested registry as @registry" do
  #     registry = Registry.create! valid_attributes
  #     get :edit, {:id => registry.to_param}, valid_session
  #     expect(assigns(:registry)).to eq(registry)
  #   end
  # end

  # describe "POST create" do
  #   describe "with valid params" do
  #     it "creates a new Registry" do
  #       expect {
  #         post :create, {:registry => valid_attributes}, valid_session
  #       }.to change(Registry, :count).by(1)
  #     end

  #     it "assigns a newly created registry as @registry" do
  #       post :create, {:registry => valid_attributes}, valid_session
  #       expect(assigns(:registry)).to be_a(Registry)
  #       expect(assigns(:registry)).to be_persisted
  #     end

  #     it "redirects to the created registry" do
  #       post :create, {:registry => valid_attributes}, valid_session
  #       expect(response).to redirect_to(Registry.last)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns a newly created but unsaved registry as @registry" do
  #       post :create, {:registry => invalid_attributes}, valid_session
  #       expect(assigns(:registry)).to be_a_new(Registry)
  #     end

  #     it "re-renders the 'new' template" do
  #       post :create, {:registry => invalid_attributes}, valid_session
  #       expect(response).to render_template("new")
  #     end
  #   end
  # end

  # describe "PUT update" do
  #   describe "with valid params" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested registry" do
  #       registry = Registry.create! valid_attributes
  #       put :update, {:id => registry.to_param, :registry => new_attributes}, valid_session
  #       registry.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "assigns the requested registry as @registry" do
  #       registry = Registry.create! valid_attributes
  #       put :update, {:id => registry.to_param, :registry => valid_attributes}, valid_session
  #       expect(assigns(:registry)).to eq(registry)
  #     end

  #     it "redirects to the registry" do
  #       registry = Registry.create! valid_attributes
  #       put :update, {:id => registry.to_param, :registry => valid_attributes}, valid_session
  #       expect(response).to redirect_to(registry)
  #     end
  #   end

  #   describe "with invalid params" do
  #     it "assigns the registry as @registry" do
  #       registry = Registry.create! valid_attributes
  #       put :update, {:id => registry.to_param, :registry => invalid_attributes}, valid_session
  #       expect(assigns(:registry)).to eq(registry)
  #     end

  #     it "re-renders the 'edit' template" do
  #       registry = Registry.create! valid_attributes
  #       put :update, {:id => registry.to_param, :registry => invalid_attributes}, valid_session
  #       expect(response).to render_template("edit")
  #     end
  #   end
  # end

  # describe "DELETE destroy" do
  #   it "destroys the requested registry" do
  #     registry = Registry.create! valid_attributes
  #     expect {
  #       delete :destroy, {:id => registry.to_param}, valid_session
  #     }.to change(Registry, :count).by(-1)
  #   end

  #   it "redirects to the registries list" do
  #     registry = Registry.create! valid_attributes
  #     delete :destroy, {:id => registry.to_param}, valid_session
  #     expect(response).to redirect_to(registries_url)
  #   end
  # end


  describe "GET projects" do
    let(:project) { FactoryGirl.create(:project) }
    let(:registry) { FactoryGirl.create(:registry) }
    let(:registry_project) { FactoryGirl.create(:registry_with_projects) }

    it "redirects if current user is not not an admin" do
      @user = FactoryGirl.create(:user)
      session[:user_id] = @user.id
      get :projects, {:url_slug => registry.url_slug}
      expect(response).to redirect_to("/registry/#{registry.url_slug}")
    end

    it "renders the registry's project page if user is admin" do
      @user = FactoryGirl.create(:user, :system_admin => true)
      session[:user_id] = @user.id
      get :projects, {:url_slug => registry.url_slug}
      expect(response).to render_template('projects')
    end

   
    it "assigns @projects will all the approved projects for" do
      # creates registry and associated project
      @registry = registry_project
      # approves the project
      @registry.registry_projects.first.approve!

      # creates a system admin user and sets user_id in session
      @user = FactoryGirl.create(:user, :system_admin => true)
      session[:user_id] = @user.id

      get :projects, {:url_slug => @registry.url_slug }
      expect(assigns(:projects)).to eq(@registry.projects)
    end

    it "returns all pending projects if no projects have been approved" do
      # creates registry and associated project
      @registry = registry_project

      # creates a system admin user and sets user_id in session
      @user = FactoryGirl.create(:user, :system_admin => true)
      session[:user_id] = @user.id

      get :projects, {:url_slug => @registry.url_slug }
      expect(assigns(:projects)).to eq(@registry.projects)
    end
  end
end


















